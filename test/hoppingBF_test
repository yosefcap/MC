using MonteCarlo,Revise
using Test, Plots, FFTW, LinearAlgebra

L=2
#@testset DQMC.jl begin
m = HoppingBFModel(dims=2,L=2,J=1, h=0.2, α=0.,μ=1.)
mc=DQMC_bond(m,beta=1)
slices=  mc.p.slices
initialize_stack(mc) # redundant ?!
build_stack(mc)
#=
for i in 1:10
propagate(mc)

end
=#
#=
function DQMC_bond_uniform(m::M; seed::Int=-1, kwargs...) where M<:Model

    p = DQMC_bondParameters(; kwargs...)
    geltype = greenseltype(DQMC_bond, m)
    conf = ones(2*m.L^m.dims, p.time_slices)
    mc = DQMC_bond{M, typeof(conf), DQMC_bondStack{geltype,Float64}}()
    mc.model = m
    mc.p = p
    mc.s = DQMC_bondStack{geltype,Float64}()
    mc.K_xy = m.J*p.delta_tau
    mc.K_tau = 0.5*log(coth(m.h*p.delta_tau))
    init!(mc, seed=seed, conf=conf)
    return mc
end
function init_uniform!(mc::DQMC_bond; seed::Real=-1, conf=ones(2*L^2,sl) )
    seed == -1 || Random.seed!(seed)

    mc.conf = conf
    mc.hopping_mat = init_hopping_matrices(mc, mc.model)
    init_diag_terms(mc, mc.model)
    initialize_stack(mc)
    mc.obs = prepare_observables(mc, mc.model)
    mc.a = DQMC_bondAnalysis()
    nothing
end
=#

#run!(mc, sweeps=10, thermalization=10, verbose=true);
#observables(mc) # what observables do exist for that simulation?
#m = mc.obs["m"] # magnetization
#mean(m)
#std(m) # one-sigma error
#greens = mc.obs["greens"]
#conf = mc.obs["confs"]
#histogram(conf)
#end

#heatmap(mc.s.greens)
#=
LL=10

bond_ch = mc.model.bond_checkerboard
N=size(bond_ch,2)
HH=zeros(100,100)
H1=zeros(100,100)
H2=zeros(100,100)
H3=zeros(100,100)
H4=zeros(100,100)
for cb in 1:4
    for n in 1:N
        i = bond_ch[2,n,cb]
        j = bond_ch[3,n,cb]
        HH[i,j]=1
        HH[j,i]=1
    end
end

    for n in 1:N
        i = bond_ch[2,n,1]
        j = bond_ch[3,n,1]
        H1[i,j]=1
        H1[j,i]=1
        i = bond_ch[2,n,2]
        j = bond_ch[3,n,2]
        H2[i,j]=1
        H2[j,i]=1

        i = bond_ch[2,n,3]
        j = bond_ch[3,n,3]
        H3[i,j]=1
        H3[j,i]=1

        i = bond_ch[2,n,4]
        j = bond_ch[3,n,4]
        H4[i,j]=1
        H4[j,i]=1
    end


gg=reshape(mc.s.greens,(LL,LL,LL,LL))
kk=fft(gg[:,:,1,1])

#kk=fft(gg)
heatmap(real(kk))
heatmap(imag(kk))
τ=0.01
GG=exp(τ*H1)*exp(τ*H3)*exp(τ*H2)*exp(τ*H4)
GG1=exp(τ*HH)

M=zeros(100,100)+I
#hopping_mat = mc.hopping_term_up
hopping_mat = [cosh(τ) sinh(τ) ; sinh(τ) cosh(τ)]
bond_ch = mc.model.bond_checkerboard
N=size(bond_ch,2) #number of bonds in checkerboard
num_ch=mc.p.num_ch
#for cb in 1:4
#cb=1


#=    if cb==4
        diag_terms = mc.diag_terms
        M = M.*diag_terms
    end
=#
    #@inbounds @views begin
        for n in 1:N
            for cb in 1:4

            i = bond_ch[2,n,cb]
            j = bond_ch[3,n,cb]
            bond_index = bond_ch[1,n,cb]
            #hopping_mat = mc.hopping_term_up


                B =hopping_mat*[M[i,:]' ; M[j,:]']


            M[i,:] = B[1,:]
            M[j,:] = B[2,:]


        end
        end
    #end

#end
=#
calculate_greens(mc)
gg=reshape(mc.s.greens,(L,L,L,L))
kk=fftshift(fft(gg[:,:,1,1]))

#kk=fft(gg)
heatmap(real(kk))
heatmap(imag(kk))

slice=3

M=Matrix{Float64}(I, 4,4)
    bond_ch = mc.model.bond_checkerboard
    N=size(bond_ch,2) #number of bonds in checkerboard
    num_ch=mc.p.num_ch
    time_slice = cld(slice,num_ch) # imagenary time
    cb = mod1(slice,num_ch) # number of checkerboard in time slice

	if cb==4
		diag_terms = mc.diag_terms
		M = M.*diag_terms
	end

    @inbounds @views begin
	    for n in 1:N
	        i = bond_ch[2,n,cb]
	        j = bond_ch[3,n,cb]
            bond_index = bond_ch[1,n,cb]
            if mc.conf[bond_index,time_slice]==1
                hopping_mat = mc.hopping_term_up
            else
                hopping_mat=mc.hopping_term_down
            end

                B =hopping_mat*[M[i,:]' ; M[j,:]']


	        M[i,:] .= B[1,:]
	        M[j,:] .= B[2,:]
	    end
	end




Juno.@enter build_stack(mc)
